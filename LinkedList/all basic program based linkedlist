#include <bits/stdc++.h>
using namespace std;
class node{
 public:
    int data;
    node* next;
    
    node(int val){
        data = val;
        next = NULL;
    }
};
/*void insertAtTail(node* &head, int val){
     node* n = new node(val);
        if(head == NULL) {head = n; return;}
        
        node* cur = head;
        
        while(cur->next!=NULL) cur = cur->next;
        
        cur->next = n;
}
 void insertAtHead(node* &head, int val){
      node* n = new node(val);
      if(head == NULL) {head = n; return;}
      
      n->next = head;
      
      head = n;
 }*/
/*void sort_linkedList(node* head){
    node *cur = head,*nextptr;
    while(cur!=NULL){
        nextptr = cur->next;
        
        while(nextptr!=NULL){
            if(cur->data>nextptr->data){
                int temp = cur->data;
                cur->data = nextptr->data;
                nextptr->data = temp;
            }
            nextptr = nextptr->next;
        }
        cur = cur->next;
    }
}*/
 /*int findMiddle(node* &head){
    node* cur1 = head;
    node* cur2 = head;
    
    while(cur2!=NULL && cur2->next!=NULL){
        cur1 = cur1->next;
        cur2 = cur2->next->next;
    }
    return cur1->data;
 }
bool Check_LinkedList_Palindrom(node* head){
       node* cur = head;
       stack<int>s;

       while(cur!=NULL){
           s.push(cur->data);
           cur = cur->next; 
       }
       node* cur1 = head;

       while(cur1!=NULL){
           int i = s.top();
            s.pop();
           if(cur1->data != i) return false;

           cur1= cur1->next;
       }
       return true;
}*/
void remove_duplicate_UnsortedLinkedlist(node* &head){
    node* cur = head;
    node* temp=cur;
    unordered_set<int>s;
    while(cur!=NULL){
        if(s.count(cur->data)){
            temp->next = cur->next; 
            delete cur;
        }else{
            s.insert(cur->data);
            temp = cur;
        }
        cur = temp->next;
    }

}
/*void remove_duplicate_sortedLinkedlist(node* &head){
    node* cur = head;
    while(cur->next!=NULL){
        if(cur->data == cur->next->data){
            node* temp = cur->next;
            cur->next = temp->next;
            delete temp;
        }else cur=cur->next;
       
    }
}*/
/*node*  reverse_linkedList(node* head){
        node* pre = NULL;
        node* cur = head;
        node* nextptr;
        while(cur!=NULL){
            nextptr = cur->next;
            cur->next = pre;
            pre = cur;
            cur = nextptr; 
        }
        return pre;
}*/
void display(node* head){
     node* cur = head;
     
     while(cur!=NULL){
         cout<<cur->data<<"->";
         cur = cur->next;
     }
     cout<<"NULL"<<endl;
 }
int main()
{
    node* head,*tail;
    
    int n,num; cin>>n>>num;
    
    head =new node(num); tail=head;
    
    for(int i=0;i<n;i++){
        cin>>num;
        tail->next = new node(num);
        tail = tail->next;
    }
    display(head);
   

    //sort_linkedList(head);
   // display(head);

   //cout<<findMiddle(head)<<endl;
   //cout<<Check_LinkedList_Palindrom(head)<<endl;
   remove_duplicate_UnsortedLinkedlist(head);
    display(head);
   //remove_duplicate_sortedLinkedlist(head);
    //display(head);
  // node* res = reverse_linkedList(head);
    //display(res);

    return 0;
}
